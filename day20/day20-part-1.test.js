const { describe, it } = require('mocha');
const { expect } = require('chai');
const { Maze } = require('./day20-part-1');

describe('Day 20 - Part 1', () => {
  describe('Maze', () => {
    it('scans the maze on initialization', () => {
      const mazeMap = [
        '         A           ',
        '         A           ',
        '  #######.#########  ',
        '  #######.........#  ',
        '  #######.#######.#  ',
        '  #######.#######.#  ',
        '  #######.#######.#  ',
        '  #####  B    ###.#  ',
        'BC...##  C    ###.# ',
        '  ##.##       ###.#  ',
        '  ##...DE  F  ###.#  ',
        '  #####    G  ###.#  ',
        '  #########.#####.#  ',
        'DE..#######...###.# ',
        '  #.#########.###.#  ',
        'FG..#########.....# ',
        '  ###########.#####  ',
        '             Z       ',
        '             Z       '
      ];

      const maze = new Maze(mazeMap);

      expect(maze.portalMap).to.deep.equal({
        'AA-1': { row: 2, col: 9 },
        'BC-1': { row: 6, col: 9 },
        'BC-2': { row: 8, col: 2 },
        'DE-1': { row: 10, col: 6 },
        'DE-2': { row: 13, col: 2 },
        'FG-1': { row: 12, col: 11 },
        'FG-2': { row: 15, col: 2 },
        'ZZ-1': { row: 16, col: 13 }
      });
      expect(maze.mazeWidth).to.equal(21);
      expect(maze.positionToPortalMap).to.deep.equal({
        [2 * maze.mazeWidth + 9]: 'AA-1',
        [6 * maze.mazeWidth + 9]: 'BC-1',
        [8 * maze.mazeWidth + 2]: 'BC-2',
        [10 * maze.mazeWidth + 6]: 'DE-1',
        [13 * maze.mazeWidth + 2]: 'DE-2',
        [12 * maze.mazeWidth + 11]: 'FG-1',
        [15 * maze.mazeWidth + 2]: 'FG-2',
        [16 * maze.mazeWidth + 13]: 'ZZ-1'
      });
    });

    describe('findMinPath', () => {
      it('returns the length of the minimum found path from AA to ZZ', async () => {
        const mazeMapA = [
          '         A           ',
          '         A           ',
          '  #######.#########  ',
          '  #######.........#  ',
          '  #######.#######.#  ',
          '  #######.#######.#  ',
          '  #######.#######.#  ',
          '  #####  B    ###.#  ',
          'BC...##  C    ###.# ',
          '  ##.##       ###.#  ',
          '  ##...DE  F  ###.#  ',
          '  #####    G  ###.#  ',
          '  #########.#####.#  ',
          'DE..#######...###.# ',
          '  #.#########.###.#  ',
          'FG..#########.....# ',
          '  ###########.#####  ',
          '             Z       ',
          '             Z       '
        ];
        const mazeMapB = [
          '                   A               ',
          '                   A               ',
          '  #################.#############  ',
          '  #.#...#...................#.#.#  ',
          '  #.#.#.###.###.###.#########.#.#  ',
          '  #.#.#.......#...#.....#.#.#...#  ',
          '  #.#########.###.#####.#.#.###.#  ',
          '  #.............#.#.....#.......#  ',
          '  ###.###########.###.#####.#.#.#  ',
          '  #.....#        A   C    #.#.#.#  ',
          '  #######        S   P    #####.#  ',
          '  #.#...#                 #......VT',
          '  #.#.#.#                 #.#####  ',
          '  #...#.#               YN....#.#  ',
          '  #.###.#                 #####.#  ',
          'DI....#.#                 #.....#  ',
          '  #####.#                 #.###.#  ',
          'ZZ......#               QG....#..AS',
          '  ###.###                 #######  ',
          'JO..#.#.#                 #.....#  ',
          '  #.#.#.#                 ###.#.#  ',
          '  #...#..DI             BU....#..LF',
          '  #####.#                 #.#####  ',
          'YN......#               VT..#....QG',
          '  #.###.#                 #.###.#  ',
          '  #.#...#                 #.....#  ',
          '  ###.###    J L     J    #.#.###  ',
          '  #.....#    O F     P    #.#...#  ',
          '  #.###.#####.#.#####.#####.###.#  ',
          '  #...#.#.#...#.....#.....#.#...#  ',
          '  #.#####.###.###.#.#.#########.#  ',
          '  #...#.#.....#...#.#.#.#.....#.#  ',
          '  #.###.#####.###.###.#.#.#######  ',
          '  #.#.........#...#.............#  ',
          '  #########.###.###.#############  ',
          '           B   J   C               ',
          '           U   P   P               '
        ];
        const mazeA = new Maze(mazeMapA);
        const mazeB = new Maze(mazeMapB);

        expect(mazeA.findMinPath()).to.equal(23);
        expect(mazeB.findMinPath()).to.equal(58);
      });
    });
  });
});
